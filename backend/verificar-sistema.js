// ================================
// SCRIPT DE VERIFICA√á√ÉO COMPLETA
// ================================
// Execute: node verificar-sistema.js

require('dotenv').config({ path: require('path').join(__dirname, '.env') });
const mongoose = require('mongoose');
const Company = require('./models/Company');
const User = require('./models/User');

async function verificarSistema() {
  console.log('üîß VERIFICA√á√ÉO COMPLETA DO SISTEMA DE EMAILS\n');
  
  // ================================
  // 1. VERIFICAR VARI√ÅVEIS DE AMBIENTE
  // ================================
  console.log('1Ô∏è‚É£ VARI√ÅVEIS DE AMBIENTE:');
  const variaveis = {
    'MONGODB_URI': process.env.MONGODB_URI ? '‚úÖ DEFINIDA' : '‚ùå N√ÉO DEFINIDA',
    'JWT_SECRET': process.env.JWT_SECRET ? '‚úÖ DEFINIDA' : '‚ùå N√ÉO DEFINIDA', 
    'EMAIL_USER': process.env.EMAIL_USER ? '‚úÖ DEFINIDA' : '‚ùå N√ÉO DEFINIDA',
    'EMAIL_PASS': process.env.EMAIL_PASS ? '‚úÖ DEFINIDA' : '‚ùå N√ÉO DEFINIDA',
    'FRONTEND_URL': process.env.FRONTEND_URL ? '‚úÖ DEFINIDA' : '‚ùå N√ÉO DEFINIDA'
  };
  
  Object.entries(variaveis).forEach(([chave, status]) => {
    console.log(`   ${chave}: ${status}`);
  });
  
  if (Object.values(variaveis).some(status => status.includes('‚ùå'))) {
    console.log('\n‚ùå ERRO: Algumas vari√°veis essenciais n√£o est√£o definidas!');
    return;
  }
  
  try {
    // ================================
    // 2. CONECTAR AO MONGODB
    // ================================
    console.log('\n2Ô∏è‚É£ CONEX√ÉO MONGODB:');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('   ‚úÖ Conectado ao MongoDB');
    
    // ================================
    // 3. VERIFICAR COMPANIES NO BANCO
    // ================================
    console.log('\n3Ô∏è‚É£ COMPANIES NO BANCO DE DADOS:');
    const companies = await Company.find().limit(5);
    console.log(`   üìä Total de companies encontradas: ${companies.length}`);
    
    if (companies.length === 0) {
      console.log('   ‚ùå ERRO: Nenhuma company encontrada no banco!');
      console.log('   üí° SOLU√á√ÉO: Registre uma company primeiro');
      return;
    }
    
    companies.forEach((company, index) => {
      console.log(`   ${index + 1}. ${company.name} - ${company.email}`);
    });
    
    // ================================
    // 4. TESTAR BUSCA DE COMPANY
    // ================================
    console.log('\n4Ô∏è‚É£ TESTE DE BUSCA:');
    const emailTeste = companies[0].email;
    console.log(`   üîç Testando com email: ${emailTeste}`);
    
    // Simular o processo do authController
    let user = await User.findOne({ email: emailTeste.toLowerCase() });
    let userType = 'user';
    
    if (!user) {
      user = await Company.findOne({ email: emailTeste.toLowerCase() });
      userType = 'company';
    }
    
    if (user && userType === 'company') {
      console.log('   ‚úÖ Company encontrada corretamente');
      console.log(`   üë§ Nome: ${user.name}`);
      console.log(`   üìß Email: ${user.email}`);
    } else {
      console.log('   ‚ùå ERRO: Company n√£o foi encontrada na busca');
      return;
    }
    
    // ================================
    // 5. VERIFICAR ESTRUTURA DA COMPANY
    // ================================
    console.log('\n5Ô∏è‚É£ ESTRUTURA DA COMPANY:');
    const camposEssenciais = ['name', 'email', 'password', 'phone', 'nif'];
    let estruturaOk = true;
    
    camposEssenciais.forEach(campo => {
      if (user[campo]) {
        console.log(`   ‚úÖ ${campo}: ${campo === 'password' ? '[OCULTO]' : user[campo]}`);
      } else {
        console.log(`   ‚ùå ${campo}: N√ÉO DEFINIDO`);
        estruturaOk = false;
      }
    });
    
    if (!estruturaOk) {
      console.log('   ‚ö†Ô∏è AVISO: Alguns campos essenciais n√£o est√£o definidos');
    }
    
    // ================================
    // 6. TESTAR CONEX√ÉO DE EMAIL
    // ================================
    console.log('\n6Ô∏è‚É£ TESTE DE CONEX√ÉO EMAIL:');
    try {
      const { testEmailConnection } = require('./utils/emailService');
      const emailOk = await testEmailConnection();
      if (emailOk) {
        console.log('   ‚úÖ Conex√£o de email funcionando');
      } else {
        console.log('   ‚ùå ERRO: Falha na conex√£o de email');
      }
    } catch (error) {
      console.log('   ‚ùå ERRO no teste de email:', error.message);
    }
    
    console.log('\nüéâ VERIFICA√á√ÉO CONCLU√çDA!');
    console.log('\nüìã RESUMO:');
    console.log('   ‚Ä¢ Vari√°veis de ambiente: OK');
    console.log('   ‚Ä¢ Conex√£o MongoDB: OK');
    console.log(`   ‚Ä¢ Companies no banco: ${companies.length} encontrada(s)`);
    console.log('   ‚Ä¢ Busca de company: OK');
    console.log('   ‚Ä¢ Conex√£o de email: Testada');
    
  } catch (error) {
    console.error('\n‚ùå ERRO na verifica√ß√£o:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Desconectado do MongoDB');
  }
}

// Executar verifica√ß√£o
verificarSistema();
